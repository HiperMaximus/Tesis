{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9372198,"sourceType":"datasetVersion","datasetId":5684309}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n    break\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass Encoder(nn.Module):\n    def __init__(self, latent_dim):\n        super(Encoder, self).__init__()\n        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1)\n        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1)\n        self.conv4 = nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1)\n        self.conv5 = nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1)\n        \n        self.fc1 = nn.Linear(4*4*512, 512)\n        self.fc_mu = nn.Linear(512, latent_dim)\n        self.fc_logvar = nn.Linear(512, latent_dim)\n        \n        self.bn = nn.BatchNorm1d(512)\n        self.lrelu = nn.LeakyReLU(0.2)\n    \n    def forward(self, x):\n        x = self.lrelu(self.conv1(x))\n        x = self.lrelu(self.conv2(x))\n        x = self.lrelu(self.conv3(x))\n        x = self.lrelu(self.conv4(x))\n        x = self.lrelu(self.conv5(x))\n        \n        x = x.view(x.size(0), -1)\n        x = self.lrelu(self.bn(self.fc1(x)))\n        \n        mu = self.fc_mu(x)\n        logvar = self.fc_logvar(x)\n        \n        return mu, logvar\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class Decoder(nn.Module):\n    def __init__(self, latent_dim):\n        super(Decoder, self).__init__()\n        self.fc = nn.Linear(latent_dim, 4*4*512)\n        \n        self.upconv1 = nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1)\n        self.upconv2 = nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1)\n        self.upconv3 = nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1)\n        self.upconv4 = nn.Conv2d(64, 32, kernel_size=3, stride=1, padding=1)\n        self.upconv5 = nn.Conv2d(32, 16, kernel_size=3, stride=1, padding=1)\n        self.final_conv = nn.Conv2d(16, 3, kernel_size=3, stride=1, padding=1)\n        \n        self.bn = nn.BatchNorm2d(512)\n        self.lrelu = nn.LeakyReLU(0.2)\n    \n    def forward(self, z):\n        x = self.fc(z)\n        x = x.view(x.size(0), 512, 4, 4)\n        \n        x = F.interpolate(self.lrelu(self.bn(x)), scale_factor=2, mode='nearest')\n        x = self.lrelu(self.upconv1(x))\n        \n        x = F.interpolate(x, scale_factor=2, mode='nearest')\n        x = self.lrelu(self.upconv2(x))\n        \n        x = F.interpolate(x, scale_factor=2, mode='nearest')\n        x = self.lrelu(self.upconv3(x))\n        \n        x = F.interpolate(x, scale_factor=2, mode='nearest')\n        x = self.lrelu(self.upconv4(x))\n        \n        x = F.interpolate(x, scale_factor=2, mode='nearest')\n        x = self.lrelu(self.upconv5(x))\n        \n        x = torch.tanh(self.final_conv(x))\n        \n        return x\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class VAE(nn.Module):\n    def __init__(self, latent_dim):\n        super(VAE, self).__init__()\n        self.encoder = Encoder(latent_dim)\n        self.decoder = Decoder(latent_dim)\n    \n    def reparameterize(self, mu, logvar):\n        std = torch.exp(0.5 * logvar)\n        eps = torch.randn_like(std)\n        return mu + eps * std\n    \n    def forward(self, x):\n        mu, logvar = self.encoder(x)\n        z = self.reparameterize(mu, logvar)\n        return self.decoder(z), mu, logvar\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def loss_function(recon_x, x, mu, logvar):\n    BCE = F.mse_loss(recon_x, x, reduction='sum')\n    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n    return BCE + KLD\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Instantiate the VAE model\nvae = VAE(latent_dim=20)  # Example latent dimension\n\n# Compile the model using torch.compile (PyTorch 2.0 feature)\ncompiled_vae = torch.compile(vae)\n\n# Move the compiled model to the GPU if available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ncompiled_vae.to(device)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"optimizer = torch.optim.Adam(compiled_vae.parameters(), lr=1e-3)\n\n# Example training loop\nfor epoch in range(10):  # Train for 10 epochs\n    for data in train_loader:  # Assuming train_loader is defined\n        data = data.to(device)\n        optimizer.zero_grad()\n        \n        recon_batch, mu, logvar = compiled_vae(data)  # Use the compiled model\n        loss = loss_function(recon_batch, data, mu, logvar)\n        \n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch {epoch + 1}, Loss: {loss.item()}')\n","metadata":{},"execution_count":null,"outputs":[]}]}